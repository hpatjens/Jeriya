#version 450

#extension GL_EXT_shader_explicit_arithmetic_types_int64 : require

layout (constant_id = 0) const uint MAX_CAMERAS = 8;
layout (constant_id = 3) const uint MAX_RIGID_MESHES = 1024;
layout (constant_id = 4) const uint MAX_MESH_ATTRIBUTES = 1024;
layout (constant_id = 5) const uint MAX_RIGID_MESH_INSTANCES = 1024;

struct Camera {
    mat4 projection_matrix;
    mat4 view_matrix;
    mat4 matrix;
};

struct VkDrawIndirectCommand {
    uint vertex_count;
    uint instance_count;
    uint first_vertex;
    uint first_instance;
};

struct MeshAttributes {
    uint64_t vertex_positions_start_offset;
    uint64_t vertex_positions_len;

    uint64_t vertex_normals_start_offset;
    uint64_t vertex_normals_len;

    uint64_t indices_start_offset;
    uint64_t indices_len;
};

struct RigidMesh {
    int64_t mesh_attributes_index;
};

struct RigidMeshInstance {
    uint64_t rigid_mesh_index;
    mat4 transform;
};

layout (set = 0, binding = 0) uniform PerFrameData { 
    uint active_camera;
    uint mesh_attributes_count;
    uint rigid_mesh_count;
    uint rigid_mesh_instance_count;
} per_frame_data;

layout (set = 0, binding = 1) buffer Cameras { 
    Camera cameras[MAX_CAMERAS];
} cameras;

layout (set = 0, binding = 3) buffer IndirectDrawRigidMeshInstanceBuffer { 
    VkDrawIndirectCommand indirect_draw_rigid_mesh_instances[MAX_RIGID_MESH_INSTANCES];
};

layout (set = 0, binding = 5) buffer StaticVertexPositionBuffer {
    vec4 vertex_positions[];
};

layout (set = 0, binding = 6) buffer StaticIndexBuffer {
    uint indices[];
};

layout (set = 0, binding = 7) buffer StaticVertexNormalsBuffer {
    vec4 vertex_normals[];
};

layout (set = 0, binding = 8) buffer MeshAttributesBuffer {
    MeshAttributes mesh_attributes[MAX_MESH_ATTRIBUTES];
};

layout (set = 0, binding = 9) buffer RigidMeshes {
    RigidMesh rigid_meshes[MAX_RIGID_MESHES];
};

layout (set = 0, binding = 10) buffer MeshAttributesActiveBuffer {
    bool mesh_attributes_active[MAX_MESH_ATTRIBUTES];
};

layout (set = 0, binding = 11) buffer RigidMeshInstancesBuffer {
    RigidMeshInstance rigid_mesh_instances[MAX_RIGID_MESH_INSTANCES];
};





layout (local_size_x = 128, local_size_y = 1, local_size_z = 1) in;

void main() {
    uint index = gl_GlobalInvocationID.x;
    if (index >= per_frame_data.rigid_mesh_instance_count) {
        return;
    }

    // Query the RigidMesh
    uint64_t rigid_mesh_index = rigid_mesh_instances[index].rigid_mesh_index;
    RigidMesh rigid_mesh = rigid_meshes[uint(rigid_mesh_index)];

    // Query the MeshAttributes
    uint64_t mesh_attributes_index = rigid_mesh.mesh_attributes_index;
    MeshAttributes mesh_attributes = mesh_attributes[uint(mesh_attributes_index)];

    // When the mesh has indices, there must be a shader invocation 
    // for each index instead of for each vertex.
    uint vertex_count;
    if (mesh_attributes.indices_len > 0) {
        vertex_count = uint(mesh_attributes.indices_len);
    } else {
        vertex_count = uint(mesh_attributes.vertex_positions_len);
    }

    VkDrawIndirectCommand draw_indirect_command;
    draw_indirect_command.vertex_count = vertex_count;
    draw_indirect_command.instance_count = 1;
    draw_indirect_command.first_vertex = 0;
    draw_indirect_command.first_instance = 0;

    indirect_draw_rigid_mesh_instances[index] = draw_indirect_command;
}